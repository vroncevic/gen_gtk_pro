"/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*-  */"
"/*"
" * main.c"
" * Copyright (C) 2017 ${AUTHOR_NAME} ${AUTHOR_EMAIL}"
" *"
" * ${PNAME} is free software: you can redistribute it and/or modify it"
" * under the terms of the GNU General Public License as published by the"
" * Free Software Foundation, either version 3 of the License, or"
" * (at your option) any later version."
" *"
" * ${PNAME} is distributed in the hope that it will be useful, but"
" * WITHOUT ANY WARRANTY; without even the implied warranty of"
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE."
" * See the GNU General Public License for more details."
" *"
" * You should have received a copy of the GNU General Public License along"
" * with this program.  If not, see <http://www.gnu.org/licenses/>."
" */"
"#include <config.h>"
"#include <gtk/gtk.h>"
"#include <glib/gi18n.h>"

"typedef struct _Private Private;"

"struct _Private {"
${TAB}
"};"

"static Private* priv = NULL;"

"/* For testing purpose, to use the local (not installed) ui file */"
"/* #define TEST */"
"#ifdef TEST"
"#define UI_FILE \\\"src/${PNAME}.ui\\\""
"#else"
"#define UI_FILE \\\"../share/${ULNAME}/ui/${PNAME}.ui\\\""
"#endif"
"#define TOP_WINDOW \\\"window\\\""

"/**"
" * Signal handlers"
" * Note: These may not be declared static because signal autoconnection"
" * only works with non-static methods"
" */"

"/* Called when the window is closed */"
"void on_window_destroy(GtkWidget *widget, gpointer data) {"
${TAB}"gtk_main_quit();"
"}"

"static GtkWidget* create_window(void) {"
${TAB}"GtkWidget *window;"
${TAB}"GtkBuilder *builder;"
${TAB}"GError* error = NULL;"
${TAB}"/* Load UI from file */"
${TAB}"builder = gtk_builder_new();"
${TAB}"if(!gtk_builder_add_from_file(builder, UI_FILE, &error)) {"
${TAB}${TAB}"g_critical("
${TAB}${TAB}${TAB}"\\\"Couldn't load builder file: %s\\\", error->message"
${TAB}${TAB}");"
${TAB}${TAB}"g_error_free(error);"
${TAB}"}"
${TAB}"/* Auto-connect signal handlers */"
${TAB}"gtk_builder_connect_signals(builder, NULL);"
${TAB}"/* Get the window object from the ui file */"
${TAB}"window = GTK_WIDGET(gtk_builder_get_object(builder, TOP_WINDOW));"
${TAB}"if(!window) {"
${TAB}${TAB}"g_critical("
${TAB}${TAB}${TAB}"\\\"Widget %s is missing in file %s.\\\", TOP_WINDOW, UI_FILE"
${TAB}${TAB}");"
${TAB}"}"
${TAB}"priv = g_malloc(sizeof(struct _Private));"
${TAB}"g_object_unref(builder);"
${TAB}"return window;"
"}"

"int main(int argc, char *argv[]) {"
${TAB}"GtkWidget *window;"
"#ifdef ENABLE_NLS"
${TAB}"bindtextdomain(GETTEXT_PACKAGE, PACKAGE_LOCALE_DIR);"
${TAB}"bind_textdomain_codeset(GETTEXT_PACKAGE, \\\"UTF-8\\\");"
${TAB}"textdomain(GETTEXT_PACKAGE);"
"#endif"
${TAB}"gtk_init(&argc, &argv);"
${TAB}"window = create_window();"
${TAB}"gtk_widget_show(window);"
${TAB}"gtk_main();"
${TAB}"g_free(priv);"
${TAB}"return 0;"
"}"

